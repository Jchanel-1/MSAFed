import argparse

polyp=['1','2','3','4',None]
   
def get_configs():
     parser = argparse.ArgumentParser()
     parser.add_argument('--log', action='store_true', help='whether to log')
     parser.add_argument('--lr', type=float, default=1e-3, help='learning rate')  
     parser.add_argument('--early', action='store_true', help='early stop w/o improvement over 10 epochs')
     parser.add_argument('--batch', type = int, default=5, help ='batch size')
     parser.add_argument("--source", choices=polyp, help="Source", nargs='+')
     parser.add_argument("--target", choices=polyp, default=None, help="Target")
     parser.add_argument('--comm_round', type = int, default=200, help = 'communication rounds')
     parser.add_argument('--save_path', type = str, default='./checkpoint/', help='path to save the checkpoint')
     parser.add_argument('--data', type = str, default='polyp', help='choice of dataset')
     parser.add_argument('--gpu', type = str, default="6", help = 'gpu device number')
     parser.add_argument('--seed', type = int, default=1234, help = 'random seed')
     parser.add_argument('--test', action='store_true', help='test on local clients')
     parser.add_argument('--ood_test', action='store_true', help='test on ood client')
     parser.add_argument('--local_epoch', type = int, default=1) 
     parser.add_argument("--verbose",action='store_true',default=False,help='whether to print some information')
     parser.add_argument('--lm_lr', type=float, default=1e-3,
                        help='learning rate of the local model optimizer')
     parser.add_argument('--tensor_log',type=str,default='./exps')
     parser.add_argument('--save_lr',action='store_true',default=False,help='whether to save lrs')
     parser.add_argument('--save_lr_path',type=str,default=None,help='the path to save ada_lrs')
     parser.add_argument('--save_weights',action='store_true',default=False,help='whether to save new weights')
     parser.add_argument('--save_weights_path',type=str,default=None,help='the path to save weights')
     parser.add_argument('--save_weights_rnd',type=int,default=None,help='the communication round to save weights or lrs')
     parser.add_argument('--is_vis_adalr',action='store_true',default=False,help='whether to visualize the adalr')
     parser.add_argument('--pt_path',type=str,default=None,help='the path to load for second stage')
     parser.add_argument('--lr_path',type=str,default=None,help='the path to load lrs')
     parser.add_argument('--wei_path',type=str,default=None,help='the path to load weighrs for TTA')
     parser.add_argument('--num_cluster',type=int,default=10,help='the number of  clusters in bank')
     parser.add_argument('--temperature',type=float,default=10,help="the value for softtening merging preds")
     parser.add_argument('--coef_cons',type=float,default=0.3,help="the coefficient for unspv_cons")
     parser.add_argument('--mode_1',type=str,default='train')
     parser.add_argument('--number_sample',default=10,type=int,help='the numebr of pixels sampling from each training image')
     parser.add_argument('--temperature_contrast',default=0.07,type=float)
     parser.add_argument('--base_temperature',default=0.07,type=float)
     parser.add_argument('--max_samples',default=10240,type=int,help='the sample number of each contrast loss')
     parser.add_argument('--max_views',default=100,type=int,help='the minimal number of each class pixel which join the computation')
     parser.add_argument('--num_class',type=int,default=2,help='the number of classer invovled in the corresponding task') 
     parser.add_argument('--coef_contra',type=float,default=0.5,help='the coefficient for contrastive loss')    
     parser.add_argument('--save_prototype',default=False,action='store_true',help='whether to store the prototype')
     parser.add_argument('--save_prototype_path',type=str,default=None,help='the path to save memory bank for tta')
     parser.add_argument('--md',type=str,default="test",choices=[None,"test","naive"],help='choose to navie learning or adpaptive learning')
     parser.add_argument('--train',action='store_true',help='whether to finetune use meta')
     parser.add_argument('--pretrain',action='store_true',help='whether to pretrain')
     parser.add_argument('--agg_coe',default=0.1,type=float)
     parser.add_argument('--base_path',type=str,help="the base path for pretraining")
     parser.add_argument('--save_global_path',type=str,help="the path for saving pretraining weights")
     parser.add_argument('--save_global_weights',action='store_true',default=False,help='whether to save the global model')
     parser.add_argument('--decay',type=float,help='the decay coefficient for determing the importance of memory based loss')
     args = parser.parse_args()

     return args
     
